; Test PIO program for outputting data with approximate ISA timing.
;
; Copyright (C) 2021 Titanium Studios Pty Ltd 
; 
; This program is free software : you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program.If not, see < https://www.gnu.org/licenses/>.

;.define num_pins 28-6+1

.program la_sample
    ; This code must not run faster than la_remove_dupes. Otherwise something will stall
    ; and the timestamp values will not be what we expect.
    ; Currently written to be 5 cycles.
loop:
    in pins, 32 [1]     ; Read GPIO pin values and write directly to output FIFO.
    in x, 32            ; Write time stamp in X to output FIFO. 
    jmp x-- loop [1]    ; Decrement X (timestamp). The jump is serves no purpose.

.program la_remove_dupes
    ; This code takes 5 cycles to process each pair of GPIO value and timestamp. 
previous_in_y:
    out x, 32           ; Read GPIO value from input FIFO and place data in X.
    jmp x!=y x_different ; See if value has changed.

    out null, 32 [1]    ; Read time stamp from input FIFO (only held in OSR) and burn a cycle
    jmp previous_in_x   ; Doesn't matter which half of loop we do as X==Y at this point. 
x_different:
    in x, 32            ; Write X to output FIFO.
    out null, 32        ; Read time stamp from input FIFO (only held in OSR).
    in osr, 32          ; Write time stamp to output FIFO. 

    ; Fall through to alternate version of code where previous value is in X.
    ; This makes code 1 cycle faster.

previous_in_x:
    out y, 32           ; Read GPIO value from input FIFO and place data in Y.
    jmp x!=y y_different ; See if value has changed.

    out null, 32 [1]    ; Read time stamp from input FIFO (only held in OSR) and burn a cycle
    jmp previous_in_y   ; Doesn't matter which half of loop we do as X==Y at this point.
y_different:
    in y, 32            ; Write X to output FIFO.
    out null, 32        ; Read time stamp from input FIFO (only held in OSR).
    in osr, 32          ; Write time stamp to output FIFO. 
