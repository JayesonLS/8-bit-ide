; Test PIO program for outputting data with approximate ISA timing.
;
; Copyright (C) 2021 Titanium Studios Pty Ltd 
; 
; This program is free software : you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program.If not, see < https://www.gnu.org/licenses/>.

; These should match the values in logic_analyzer.h
.define num_pin_bits 25
.define num_timestamp_bits 32-num_pin_bits

; Reads the current state of the pins and when the state is different
; to the previous, outputs the new pin values and timestamp to the FIFO.
; Each time through the loop the timestamp is decremented (we don't
; have increment functionality in the instruction set). 
;
; Loop time (sample period) is 7 cycles.
;
; SM should be configured for autopush.
.program la_sample

check_for_trigger:  ; Trigger when CS is high, AEN is low and either ~IOW or ~IOR is low.
    mov osr, pins
    out null, 10    ; Skip data and address bits.
    out x, 1        ; AEN to X (want 0)
    jmp x-- check_for_trigger
    out null, 2     ; Skip ~DACK and SPI_RX
    out x, 1        ; ~IOW 1 to X (want 0)
    out null, 2     ; Skip SPI_SCK and SPI_TX
    out y, 1        ; ~IOR to Y (want 0)
    jmp !x is_io_rw
    jmp y-- check_for_trigger
is_io_rw:
    out null, 5     ; Skip ~RESET, DATA_DIR and internal GPIOs.
    out x, 1        ; ~CS 1 to X (want 0)
    jmp x-- check_for_trigger

    ; Trigger conditions met.

    mov osr, null           ; Zero timestamp.

.wrap_target
previous_in_y:
    mov x, osr              ; Decrement timestamp held in osr.
    jmp x-- dec_x_jmp       ; The jump has no effect whether taken or not.
dec_x_jmp:
    mov osr, x

    mov x, pins             ; See if pins have changed.
    jmp x!=y x_different
    jmp previous_in_y [1]   ; Pins have not changed, so loop. Delay for consistent loop timing.
x_different:
    in x, num_pin_bits      ; Pins have changed so send desired number of pins and timestamp,
    in osr, num_timestamp_bits

    ; Fall through to alternate version of code where previous value is in X rather than Y.
    ; This makes the loop 1 cycle faster.

previous_in_x:
    mov y, osr
    jmp y-- dec_y_jmp
dec_y_jmp:
    mov osr, y

    mov y, pins
    jmp x!=y y_different
    jmp previous_in_x [1]
y_different:
    in y, num_pin_bits
    in osr, num_timestamp_bits
.wrap